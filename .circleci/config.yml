version: 2.1

commands:
  build-docker:
    description: "Build and deploy a docker box"
    parameters:
      box:
        type: string
        default: "minimal"
    steps:
      - checkout
      - run: ./docker/login
      - run:
          no_output_timeout: 30m
          command: ./docker/build << parameters.box >> $CIRCLE_BRANCH
      - run: ./docker/push << parameters.box >> $CIRCLE_BRANCH
  nix-prepare-test-push:
    steps:
      - checkout
      - run:
          name: prepare nix
          command: |
            . $HOME/.nix-profile/etc/profile.d/nix.sh
            ./ci/setup-hydra-cache.sh
            ./ci/cachix.sh setup
      - run:
          name: tests
          command: |
            set -x
            . $HOME/.nix-profile/etc/profile.d/nix.sh
            nix-shell --pure --run echo
            nix-shell --pure --arg include '{ test = true; }' --run hn-test
            # TODO: decide whether or not we want to keep this
            # HN_VERBOSE=true $(nix-build . --no-link -A pkgs.holonix)/bin/holonix --run hn-test
      - run:
          name: run the update script
          command: |
            . $HOME/.nix-profile/etc/profile.d/nix.sh
            nix-shell --pure -p git --run '
              git config --global user.email "ci@holochain.org"
              git config --global user.name "Holochain CI"
              ./nix/update.sh
              PAGER="" git show
            '
      - run:
          name: push to cachix
          command: |
            . $HOME/.nix-profile/etc/profile.d/nix.sh
            ./ci/cachix.sh push
jobs:
  debian:
    docker:
      - image: holochain/holonix:debian.develop
        environment:
          CACHIX_NAME: holochain-ci
    steps:
      - nix-prepare-test-push

  ubuntu:
    docker:
      - image: holochain/holonix:ubuntu.develop
        environment:
          CACHIX_NAME: holochain-ci
    steps:
      - nix-prepare-test-push

  all-jobs-succeed:
    docker:
      - image: bash
    steps:
      - run:
          name: echo
          command: echo

  docker-build-ubuntu:
    resource_class: large
    machine: true
    steps:
      - build-docker:
          box: ubuntu

  docker-build-debian:
    resource_class: large
    machine: true
    steps:
      - build-docker:
          box: debian

workflows:
  version: 2
  tests:
    jobs:
      - debian
      - ubuntu
      - all-jobs-succeed:
          requires:
            - debian
            - ubuntu
      - docker-build-ubuntu:
          filters:
            branches:
              only:
                - main
                - develop
      - docker-build-debian:
          filters:
            branches:
              only:
                - main
                - develop
